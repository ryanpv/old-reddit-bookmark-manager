<Route>
Route component should be called in the main App file. Must specify "path=''" for specific URL location for that data. 
Route component should be wrapped in <Routes> in react v6 or <Switch> in v5 to render first route that it matches. Can also
pass in "exact path=''" to avoid rendering multiple components that match the route (ie. '/' and '/example'). To use dynamic routes
we have to import useParams hook and call it by storing it in a variable (i.e const { params}  = useParams(); ). To use this we have to
specify the dynamic route param with a semi-colon before path name (i.e '/:exmaple'). Throughout the App, we should match the path
name with the useParams variable name.

useContext() hook
Hook that allows us to share variables from parent components to child components. Must import and initialize createContext().Wrap 
the <UserContext.Provider> tag around the component to share context (almost like
passing props) - allows child props acccess to all variables specified as value ->>> supply the value={} prop to the provider tag. 
Typically the value would be state - so wherever we choose to wrap the provider is where we call the useContext hook. Variable name 
of the hook should match state if you're pass state as the context value. Then createContext variable initialized earlier 
should be passed into the hook. 

useMemo()
A hook that rerenders when one of its dependencies updates, unlike useEffect, which will rerender app whenever there are any changes. 
Accepts two parameters, first would be the "expensive" function and second parameter would be the dependencies.